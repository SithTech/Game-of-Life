/*
CSCE 441 Assignment 6
Completed by: Travis Stewart
*/

#include "Vector.h"

//------------------------------------------------------
//------------------------------------------------------

void Vector::operator += (const Vector& v) {
	x += v.x;
	y += v.y;
	z += v.z;
}

//------------------------------------------------------

void Vector::operator -= (const Vector& v) {
	x -= v.x;
	y -= v.y;
	z -= v.z;
}

//------------------------------------------------------

void Vector::operator *= (const Vector& v) {
	x *= v.x;
	y *= v.y;
	z *= v.z;
}

//------------------------------------------------------

void Vector::operator /= (const Vector& v) {
	x /= v.x;
	y /= v.y;
	z /= v.z;
}

//------------------------------------------------------

Vector Vector::operator + (const Vector& v) {
	return Vector(x + v.x, y + v.y, z + v.z);
}

//------------------------------------------------------

Vector Vector::operator - (const Vector& v) {
	return Vector(x - v.x, y - v.y, z - v.z);
}

//------------------------------------------------------

Vector Vector::operator * (const Vector& v) {
	return Vector(x * v.x, y * v.y, z * v.z);
}

//------------------------------------------------------

Vector Vector::operator / (const Vector& v) {
	return Vector(x / v.x, y / v.y, z / v.z);
}

//------------------------------------------------------
//------------------------------------------------------

void Vector::operator += (const float& f) {
	x += f;
	y += f;
	z += f;
}

//------------------------------------------------------

void Vector::operator -= (const float& f) {
	x -= f;
	y -= f;
	z -= f;
}

//------------------------------------------------------

void Vector::operator *= (const float& f) {
	x *= f;
	y *= f;
	z *= f;
}

//------------------------------------------------------

void Vector::operator /= (const float& f) {
	x /= f;
	y /= f;
	z /= f;
}

//------------------------------------------------------

Vector Vector::operator + (const float& f) {
	return Vector(x + f, y + f, z + f);
}

//------------------------------------------------------

Vector Vector::operator - (const float& f) {
	return Vector(x - f, y - f, z - f);
}

//------------------------------------------------------

Vector Vector::operator * (const float& f) {
	return Vector(x * f, y * f, z * f);
}

//------------------------------------------------------

Vector Vector::operator / (const float& f) {
	return Vector(x / f, y / f, z / f);
}

//------------------------------------------------------
//------------------------------------------------------

bool Vector::operator == (const Vector& v) {
	return x == v.x && y == v.y && z == v.z;
}

//------------------------------------------------------

bool Vector::operator < (const Vector& v) {
	return x < v.x && y < v.y && z < v.z;
}

//------------------------------------------------------

bool Vector::operator > (const Vector& v) {
	return x > v.x && y > v.y && z > v.z;
}

//------------------------------------------------------

bool Vector::operator <= (const Vector& v) {
	return x <= v.x && y <= v.y && z <= v.z;
}

//------------------------------------------------------

bool Vector::operator >= (const Vector& v) {
	return x >= v.x && y >= v.y && z >= v.z;
}

//------------------------------------------------------

bool Vector::operator != (const Vector& v) {
	return x != v.x && y != v.y && z != v.z;
}

//------------------------------------------------------
//------------------------------------------------------

bool Vector::operator == (const Vector& v) const {
	return x == v.x && y == v.y && z == v.z;
}

//------------------------------------------------------

bool Vector::operator < (const Vector& v) const {
	return x < v.x && y < v.y && z < v.z;
}

//------------------------------------------------------

bool Vector::operator > (const Vector& v) const {
	return x > v.x && y > v.y && z > v.z;
}

//------------------------------------------------------

bool Vector::operator <= (const Vector& v) const {
	return x <= v.x && y <= v.y && z <= v.z;
}

//------------------------------------------------------

bool Vector::operator >= (const Vector& v) const {
	return x >= v.x && y >= v.y && z >= v.z;
}

//------------------------------------------------------

bool Vector::operator != (const Vector& v) const {
	return x != v.x && y != v.y && z != v.z;
}

//------------------------------------------------------

string Vector::info() { return to_string(x) + ", " + to_string(y) + ", " + to_string(z); }


//=========================================================================================================================
//------------------------------------------------------Unit Vector--------------------------------------------------------
//=========================================================================================================================

Vector Vector::unit()
{
	float denom = sqrt(powf(x, 2.0f) + powf(y, 2.0f) + powf(z, 2.0f));
	return Vector(x / denom, y / denom, z / denom);
}

//=========================================================================================================================
//-------------------------------------------------------------------------------------------------------------------------
//=========================================================================================================================

float Vector::getDistance(Vector& pt)
{
	return sqrt(powf((pt.x - x), 2) + powf((pt.y - y), 2) + powf((pt.z - z), 2));
}

//=========================================================================================================================
//-------------------------------------------------------------------------------------------------------------------------
//=========================================================================================================================

Vector Vector::getDirectionTo(Vector& v)
{
	return Vector(v.x - x, v.y - y, v.z - z);
}

//==========================================================================================================================================================================================================================
//----------------------------------------------------------------------------------------------General Vector Functions----------------------------------------------------------------------------------------------------
//==========================================================================================================================================================================================================================


//=========================================================================================================================
//---------------------------------------------------Calculate Normal------------------------------------------------------
//=========================================================================================================================

Vector normal(const Vector& v1, const Vector& v2, const Vector& v3)
{
	//Create two vectors to perform cross product with
	Vector v(v3.x - v1.x, v3.y - v1.y, v3.z - v1.z);
	Vector w(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z);

	//Cross product VxW and return result
	Vector r_vect((v.y*w.z - v.z*w.y), (v.z*w.x - v.x*w.z), (v.x*w.y - v.y*w.x));

	return r_vect;
}

//=========================================================================================================================
//------------------------------------------------------Dot Product--------------------------------------------------------
//=========================================================================================================================

float dot(const Vector& v1, const Vector& v2)
{
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}

//=========================================================================================================================
//-----------------------------------------------------Cross Product-------------------------------------------------------
//=========================================================================================================================

Vector cross(const Vector& v, const Vector& w)
{
	//Cross product VxW and return result
	Vector r_vect((v.y*w.z - v.z*w.y), (v.z*w.x - v.x*w.z), (v.x*w.y - v.y*w.x));

	return r_vect;
}

//=========================================================================================================================
//-------------------------------------------------------------------------------------------------------------------------
//=========================================================================================================================



